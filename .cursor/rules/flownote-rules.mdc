---
description: 
globs: 
alwaysApply: false
---
Cursor Rules for FlowNote
1. General Guidelines
âœ… Stick to the MVP â€“ Focus only on the core features: speech-to-text (Deepgram), AI content generation (OpenAI), and user authentication (Firebase). Avoid feature creep.
âœ… Separation of Concerns (SoC) â€“ Keep frontend, backend, and database modular and independent.
âœ… Don't Repeat Yourself (DRY) â€“ Use reusable components, hooks, and services to minimize redundancy.
âœ… Maintain a 'mobile first' approach
âœ… Follow the documentation â€“ The docs (fn-projecttree.md & fn-techstack.md) should guide architectural decisions. Update them when making significant changes.

2. Project Structure & Key Files
ðŸ“Œ Frontend: React + Vite + TypeScript
ðŸ“Œ Backend: Node.js + Express
ðŸ“Œ Database: PostgreSQL
ðŸ“Œ Authentication: Firebase
ðŸ“Œ AI Integration: Deepgram (speech-to-text) & OpenAI (AI generation)

Frontend (Web)
âœ… Components in /src/components/ must be reusable and self-contained.
âœ… State management should be handled via React Context API â€“ Avoid excessive prop-drilling.
âœ… Use custom hooks (/src/hooks/) for shared logic (e.g., API calls, data fetching).
âœ… Use Tailwind CSS for styling â€“ Avoid inline styles and !important.
âœ… Manage Firebase authentication only inside AuthContext.tsx â€“ Do not handle auth logic inside components.

Backend (API Server)
âœ… Keep AI integration services (/services/) separate from controllers.
âœ… Use middlewares (/middlewares/) for authentication and validation.
âœ… Database queries must be inside /models/ â€“ Do not write SQL queries in controllers.
âœ… Keep API routes organized in /routes/ based on functionality.
âœ… Use environment variables (.env) for sensitive data â€“ Never hardcode API keys.

Database (PostgreSQL)
âœ… Use migrations for database changes â€“ Do not manually edit schema.sql.
âœ… Seed data (seed.sql) should only be used for testing, not in production.

3. Code Style & Best Practices
âœ… Use ESLint and Prettier for consistent formatting (configured in package.json).
âœ… Use clear and descriptive naming for files and functions â€“ Avoid names like tmpFunc().
âœ… Wrap asynchronous functions in try/catch to prevent crashes.
âœ… Optimize React components with useMemo and useCallback to avoid unnecessary re-renders.

4. Performance & Optimization
âœ… Use lazy loading (React.lazy()) for components where possible.
âœ… Leverage caching mechanisms (e.g., store AI-generated content in Firestore).
âœ… Minimize API calls â€“ Only fetch data when necessary.